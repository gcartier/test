(manifest jazz.designer.toolbox.Toolbox-Module

  (version 207012)
  (digest "07a918ce2d5a3ed9ce3136255f78e4634560a577")
  (references (jazz.debugger get-debugger-manager)
              (jazz.designer require-symbolic-addable-references)
              (jazz.designer.descriptor.Component-Descriptor (Component-Descriptor component-determine-paster))
              (jazz.designer.descriptor.Property-Descriptor Property-Descriptor)
              (jazz.designer.domain.Literal-Domain Literal-Domain)
              (jazz.designer.domain.Value-Domain Value-Domain)
              (jazz.designer.toolbox.Toolbox-Group Toolbox-Group (Toolbox-Group copy-object) (Toolbox-Group title) Toolbox-Group-Descriptor (Toolbox-Group-Descriptor component-get-categorized-addable-classes) (Toolbox-Group-Descriptor~Class get-class-form) (Toolbox-Group-Descriptor~Class get-class-forms) (Toolbox-Group-Descriptor~Class set-class-form) (Toolbox-Group~Class get-class-descriptor))
              (jazz.designer.toolbox.Toolbox-Model Toolbox-Model)
              (jazz.designer.view designer-error insert-class insert-new-form)
              (jazz.editor.jazz call-with-saved-text insert-imports)
              (jazz.editor.jazz.text.Jazz-Explorer Jazz-Explorer)
              (jazz.editor.lisp.text.Lisp-Explorer (Lisp-Explorer backward-expr))
              (jazz.jml construct-form get-class-form-with-origin locators-ref)
              (jazz.jml.syntax <form> form)
              (jazz.language.runtime.exception Error)
              (jazz.language.runtime.functional Object-Class class? collect-if getf sort table-keys)
              (jazz.language.runtime.geometry Range$Cell$)
              (jazz.language.runtime.kernel class-of dispatch is? module-ref new object->string require-module subclass? subtype? with-exception-filter)
              (jazz.language.syntax.bind bind)
              (jazz.language.syntax.macros submodule when ~)
              (jazz.library.component.Component Component (Component finish) (Component name))
              (jazz.library.literals construct-class-reference construct-image-resource)
              (jazz.library.resource.Image-Resource Image-Resource)
              (jazz.library.utility.Class-Reference Class-Reference)
              (jazz.library.utility.Reference (Reference resolve-reference))
              (jazz.locale.components Locale-Tree)
              (jazz.runtime find-unit-source parse-runtime-reference)
              (jazz.ui.clipboard.platform.glfw clipboard-format-available?)
              (jazz.ui.text.Text-Explorer (Text-Explorer get-end))
              (scheme.language.runtime.kernel apply car cdr cons eq? for-each list list->table map not null? string<? symbol->string symbol?)
              (scheme.syntax declaration-path)))
