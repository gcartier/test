(manifest jazz.website.transformation.JazzWebsite-Transformation

  (version 207012)
  (digest "d321aed3bb91f9a60e446d9ecfe1c9d579d231fb")
  (references (jazz.catalog.catalog.Cataloguer Cataloguer (Cataloguer add-catalog))
              (jazz.doc.catalog.Component-Catalog Component-Catalog)
              (jazz.doc.doc.Category-Doc Category-Doc)
              (jazz.doc.doc.Class-Doc Class-Doc)
              (jazz.doc.doc.Concept-Doc Concept-Doc)
              (jazz.doc.doc.Constant-Doc Constant-Doc)
              (jazz.doc.doc.Definition-Doc Definition-Doc)
              (jazz.doc.doc.Doc-Insert Doc-Insert (Doc-Insert get-path))
              (jazz.doc.doc.Export-Doc Export-Doc)
              (jazz.doc.doc.Form-Doc Form-Doc)
              (jazz.doc.doc.Generic-Doc Generic-Doc)
              (jazz.doc.doc.Interface-Doc Interface-Doc)
              (jazz.doc.doc.Method-Doc Method-Doc)
              (jazz.doc.doc.Module-Doc Module-Doc)
              (jazz.doc.doc.Package-Doc Package-Doc)
              (jazz.doc.doc.Primitive-Doc Primitive-Doc)
              (jazz.doc.doc.Project-Doc Project-Doc)
              (jazz.doc.doc.Property-Doc Property-Doc)
              (jazz.doc.doc.Section-Doc Section-Doc (Section-Doc get-sort?))
              (jazz.doc.doc.Slot-Doc Slot-Doc)
              (jazz.doc.doc.Syntax-Doc Syntax-Doc)
              (jazz.doc.doc.Unit-Doc Unit-Doc)
              (jazz.doc.transformation.DocToHTML-Transformation DocToHTML-Transformation)
              (jazz.io Directory extension=?)
              (jazz.io.literals construct-directory)
              (jazz.jml form->node)
              (jazz.jml.model.JML-Element JML-Element (JML-Element get-tag))
              (jazz.jml.syntax pattern)
              (jazz.jml.transformation.JML-Transformation (JML-Transformation initialize))
              (jazz.language.runtime.exception error)
              (jazz.language.runtime.format format)
              (jazz.language.runtime.functional ->string List-Factory (List-Factory get-output) (List-Factory put) (List-Factory put-sequence) Object-Class (Sequence sequence-element) alphabetic? assv-value box-list collect collect-if find-keyword first join memq? naturals nu<? partition second sort table-add third unbox-list upcase)
              (jazz.language.runtime.kernel is? new not-null? unimplemented unspecified)
              (jazz.language.runtime.object (Object object-alphabetic?) (Object object-upcase))
              (jazz.language.syntax.assertion assert)
              (jazz.language.syntax.bind bind)
              (jazz.language.syntax.bind-keywords bind-keywords)
              (jazz.language.syntax.increase increase!)
              (jazz.language.syntax.macros prog1 when)
              (jazz.language.syntax.typecase typecase)
              (jazz.library.component read-form)
              (jazz.system user-feedback)
              (jazz.system.access get-application)
              (jazz.website generate-manual? generate-reference?)
              (scheme.language.runtime.kernel + <= = append apply car cdr cons eq? equal? for-each iterate-table length list make-table map not null? reverse string string<? symbol? table-ref table-set!)))
