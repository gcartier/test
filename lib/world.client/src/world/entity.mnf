(manifest world.entity

  (version 207012)
  (digest "a999418a6da30ae73bdb70c96c8d202e02ace1ec")
  (references (jazz.graphic.opengl.glew.header GL_LIGHTING GL_LINE_LOOP glBegin glDisable glEnable glEnd glLineWidth)
              (jazz.language.runtime.exception error)
              (jazz.language.runtime.format format)
              (jazz.language.runtime.functional Call-Site (Call-Site get-procedure) Object-Class element register-site)
              (jazz.language.runtime.kernel is? new unspecified)
              (jazz.language.runtime.object Object print-unreadable)
              (jazz.language.syntax.assertion assert)
              (jazz.language.syntax.loop loop)
              (jazz.language.syntax.macros site unless when)
              (jazz.library.component.Component (Component destroy) (Component parent) (Component prepare))
              (scheme.language.runtime.kernel + - / < car cdr cons eq? length list->vector max min not null? set-cdr!)
              (world *current-camera* *current-world*)
              (world.animation Morphing (Morphing animate) (Morphing change-animation) (Morphing get-animation) (Morphing get-transition) (Morphing goto-time) (Morphing set-transition) (Morphing set-transition-frame) (Morphing transition-done?))
              (world.camera Camera)
              (world.draw gl-horizontal-circle render-parallelepiped)
              (world.dye dye->color)
              (world.dyes purple-dye white-dye)
              (world.element Element (Element draw-target) (Element draw-target-circle) (Element effective-matrix&) (Element element-polygons) (Element element-radiuses) (Element matrix) (Element position) (Element print) (Element reset-radiuses) (Element scale) (Element selection-bounds) (Element set-color) (Element target-moveable?) (Element target-radius) (Element transformed-bounds) (Element transformed-center) (Element transformed-parallelepiped) (Element transformed-radiuses) (Element update-matrix))
              (world.generate iterate-parallelepiped-quads parallelepiped-bounds polygons-extract transform-cuboid)
              (world.geometry cuboid-radiuses matrix-multiply! matrix-transform-3x4)
              (world.geometry.base vertex* vertex*!)
              (world.geometry.classes cuboid cuboid-bottom cuboid-top make-matrix make-vertex present-vertex vertex-x vertex-z)
              (world.geometry.syntax make-matrix& make-vertex& matrix-multiply& vertex*&)
              (world.live World (World find-model))
              (world.model Model (Model anchor->position) (Model get-bounds) (Model get-center) (Model get-global-matrix) (Model get-polygons) (Model get-scale) (Model position->anchor) (Model require-animation))
              (world.opengl gl-colorize-dye)
              (world.renderers require-renderer)
              (world.support get-animations?)
              (world.syntax current-camera current-world)))
