(manifest world.client

  (version 207012)
  (digest "e530a4dec37e101eb6eb494c4fc9dd98337c0ff0")
  (references (gambit.log log-transition)
              (jazz.debuggee register-debuggee-hook register-evaluate-hook)
              (jazz.graphic.Color Color)
              (jazz.graphic.font.Font Font)
              (jazz.graphic.literals construct-color construct-font)
              (jazz.graphic.opengl.window new-opengl-window)
              (jazz.ide.login choose-login)
              (jazz.io Directory (Directory new-file) File (File create) (Pathname exists?) (Pathname parse) extension=? path-settings register-alias register-repository-aliases tokenise-filename)
              (jazz.io.literals construct-directory construct-file)
              (jazz.jml construct-form get-class-form-with-origin locators-ref)
              (jazz.jml.syntax <form> form)
              (jazz.jrm connect-remote-register get-local-register)
              (jazz.language.runtime.exception Exception call-with-catch error)
              (jazz.language.runtime.functional Object-Class current-continuation-chain member? memq? primordial-thread random-seed read-delayed-event thread-read-message xor)
              (jazz.language.runtime.geometry Dimension Point)
              (jazz.language.runtime.kernel +infinity add-exit-job! command-argument current-thread digest-file find-repository gc-report-set! get-update-version install-repository kernel-source-access? list->updates mutex-state new testing unspecified versioned-directory)
              (jazz.language.syntax.assertion assert)
              (jazz.language.syntax.bind bind)
              (jazz.language.syntax.macros catch when)
              (jazz.library.component.Component Component (Component close) (Component install) (Component~Class get-class-form) (Component~Class get-class-forms) (Component~Class set-class-form))
              (jazz.library.literals construct-image-resource construct-reference construct-version)
              (jazz.library.resource.Image-Resource Image-Resource)
              (jazz.library.utility.Reference Reference)
              (jazz.literals construct-dimension construct-point)
              (jazz.logger set-logger-directory)
              (jazz.system File-Settings find-setting register-settings)
              (jazz.system.application.Application (Application choose-profile-login) (Application class-actions) (Application close-environment) (Application default-bindings) (Application default-frame-class) (Application default-preferences) (Application default-workspaces) (Application finish-process) (Application known-extension-frame-class) (Application load-skins) (Application new-toplevel) (Application process-alias) (Application save-environment) (Application thread-process-call-ste) (Application thread-process-ste))
              (jazz.system.application.Application-Bindings Application-Bindings (Application-Bindings~Class get-class-form) (Application-Bindings~Class get-class-forms) (Application-Bindings~Class set-class-form))
              (jazz.system.application.Application-Preferences Application-Preferences (Application-Preferences~Class get-class-form) (Application-Preferences~Class get-class-forms) (Application-Preferences~Class set-class-form))
              (jazz.system.platform.glfw shift-down?)
              (jazz.system.process.Process (Process exit-process) (Process initial-console-context) (Process initialize-settings) (Process install-profiles) (Process new-default-profile) (Process process-copyright) (Process process-email) (Process process-icon) (Process process-name) (Process process-owner) (Process process-version) (Process profile-kind) (Process run-loop) (Process runtime-properties) (Process settings) (Process settings-version) (Process start-servers?) (Process templates-directory) (Process thread-process-loop) (Process use-profile?))
              (jazz.ui find-actions styles-domain)
              (jazz.ui.action.Action Action)
              (jazz.ui.layout.Separator Separator)
              (jazz.ui.literals construct-action)
              (jazz.ui.menu.Edit-Base-Menu Edit-Base-Menu)
              (jazz.ui.menu.File-Base-Menu File-Base-Menu)
              (jazz.ui.menu.Label-Item Label-Item)
              (jazz.ui.menu.Menu Menu (Menu~Class get-class-form) (Menu~Class get-class-forms) (Menu~Class set-class-form))
              (jazz.ui.menu.Menubar Menubar)
              (jazz.ui.menu.Window-Menu Window-Menu)
              (jazz.ui.preference.Mainbar-Preferences Mainbar-Preferences)
              (jazz.ui.preference.Menubar-Preferences Menubar-Preferences)
              (jazz.ui.preference.Plain-Text-Preferences Plain-Text-Preferences)
              (jazz.ui.preference.Stage-Preferences Stage-Preferences)
              (jazz.ui.preference.Status-Preferences Status-Preferences)
              (jazz.ui.preference.Styles-Preferences Styles-Preferences)
              (jazz.ui.preference.Text-Style-Preferences Text-Style-Preferences)
              (jazz.ui.skin.Skins Skins)
              (jazz.ui.text.Plain-Text-View Plain-Text-View)
              (jazz.ui.view.Action-Icon Action-Icon)
              (jazz.ui.view.Status-Label Status-Label)
              (jazz.ui.view.Status-Toolbar Status-Toolbar (Status-Toolbar~Class get-class-form) (Status-Toolbar~Class get-class-forms) (Status-Toolbar~Class set-class-form))
              (jazz.ui.view.Toolbar Toolbar (Toolbar~Class get-class-form) (Toolbar~Class get-class-forms) (Toolbar~Class set-class-form))
              (jazz.ui.view.View (View with-update-locked))
              (jazz.ui.window.platform.glfw message-available?)
              (jazz.ui.workspace.Workspace-Preferences Workspace-Preferences (Workspace-Preferences~Class get-class-form) (Workspace-Preferences~Class get-class-forms) (Workspace-Preferences~Class set-class-form))
              (jazz.ui.workspace.Workspaces-Preferences Workspaces-Preferences (Workspaces-Preferences~Class get-class-form) (Workspaces-Preferences~Class get-class-forms) (Workspaces-Preferences~Class set-class-form))
              (jazz.version Version)
              (scheme.language.runtime.kernel > append assq cadr call-with-input-file car cdr cons eof-object? eq? equal? for-each list list->table not pair? read symbol->string symbol?)
              (scheme.syntax declaration-path)
              (world *current-tutorial* *current-world* *current-zone* set-validate-shaders?)
              (world.appl World-Application (World-Application client-side?) (World-Application effective-player-name) (World-Application enter-zone) (World-Application get-world-client) (World-Application get-world-server) (World-Application server-side?) (World-Application settings-alias) (World-Application settings-root) (World-Application setup-application-interface) (World-Application tier))
              (world.client.actions World-Anonymous-Actions World-Camera-Actions World-Collision-Actions World-Debug-Actions World-Edition-Actions World-Game-Actions World-Graphics-Actions World-History-Actions World-Interface-Actions World-Menu-Actions World-Minecraft-Actions World-Movement-Actions World-Objective-Actions World-Server-Actions World-Sound-Actions World-Spell-Actions World-Tutorial-Actions World-Window-Actions World-World-Actions World-Zone-Actions)
              (world.client.bars World-Camera-Bar World-Collision-Bar World-Debug-Bar World-Edition-Bar World-Game-Bar World-History-Bar World-Interface-Bar World-Main-Bar World-Minecraft-Bar World-Objective-Bar World-Target-Bar World-Tutorial-Bar World-Window-Bar)
              (world.client.configuration world-client-host world-client-service)
              (world.commands serialize-commands)
              (world.interface.bars install-bars)
              (world.interface.dialogs World-Dialog open-message)
              (world.interface.documents World-Formatted-Text-View open-document)
              (world.interface.skin World-Skin)
              (world.live World (World evaluate-hook) (World reset-profiling) (World set-debugged?) (World zone-confirm-close) (World zone-save-exit))
              (world.log current-log-context event-id event-sequential-state support-state waiting-state with-log-context)
              (world.option Option Options)
              (world.profile World-Profile)
              (world.settings copy-settings-if-not-exists setup-snapshots world-file world-setting world-templates-directory)
              (world.syntax current-tutorial current-world current-zone)
              (world.task dump-tasks task-mutex with-task-mutex)
              (world.window World-Window)
              (world.zone Zone (Zone stop-tasks))))
