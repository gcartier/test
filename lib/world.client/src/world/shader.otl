(module world.shader jazz
  (import (jazz.graphic.opengl.glew))
  (import (world))
  (import (world.foreign))
  (class Shader extends Object
    (slot type <int> accessors generate)
    (slot code accessors generate)
    (slot shaderid accessors generate)
    (method protected override (initialize type))
    (method public final (create-shader))
    (method public final (compile-shader)))
  (class Shader-Program extends Object
    (slot name <Object> getter generate)
    (slot vertex-shader <Object> accessors generate)
    (slot fragment-shader <Object> accessors generate)
    (slot program <Object> accessors generate)
    (slot uniforms <Object> getter generate)
    (slot attributes <Object> getter generate)
    (method protected override (initialize (name: name (unspecified))))
    (method protected virtual (prepare))
    (method protected virtual (default-vertex-shader))
    (method protected virtual (default-fragment-shader))
    (method public final (set-fs code))
    (method public final (set-vs code))
    (method public final (link))
    (method public final (relink))
    (method public final (create-shaders))
    (method public final (attach-shaders))
    (method public final (detach-shaders))
    (method public final (use))
    (method public final (unuse))
    (method public final (get-uniform name))
    (method public final (add-uniform name))
    (method public final (get-attribute name))
    (method public final (add-attribute name))))
