(module world.texture jazz
  (import (jazz.graphic))
  (import (jazz.graphic.opengl.glew))
  (import (jazz.io))
  (import (jazz.platform.cairo))
  (import (world))
  (import (world.autoload))
  (import (world.external.targa))
  (import (world.foreign))
  (import (world.support))
  (import (world.syntax (phase syntax)))
  (class Image-Texture extends Object
    (slot width <fx> getter generate)
    (slot height <fx> getter generate)
    (slot depth <fx+> getter generate)
    (slot data <Object> getter generate)
    (slot id <Object> getter generate)
    (slot min-filter <Object> getter generate)
    (slot mag-filter <Object> getter generate)
    (slot wrap <Object> getter generate)
    (slot parameters <Object> getter generate)
    (slot mipmap? <bool> getter generate)
    (slot metadata <Object> getter generate)
    (slot file <Object> accessors generate)
    (slot array? <Object> getter generate)
    (method protected override (initialize width height (data: data (unspecified)) (min-filter: min-filter (unspecified)) (mag-filter: mag-filter (unspecified)) (wrap: wrap (unspecified)) (parameters: parameters (unspecified)) (mipmap?: mipmap? (unspecified)) (metadata: metadata (unspecified)) (file: file (unspecified))))
    (method protected override (destroy))
    (method protected final (map-texture (repeat?: repeat? (unspecified))))
    (method protected final (map-textures textures (repeat?: repeat? (unspecified))))
    (method protected final (textured-quad bl tl tr br)))
  (class Cairo-Texture extends Image-Texture
    (slot surface <Surface> getter generate)
    (method protected override (initialize width height . rest))
    (method protected override (destroy)))
  (definition public (make-cairo-texture width height . rest))
  (definition public (make-file-texture file (min-filter: min-filter (unspecified)) (mag-filter: mag-filter (unspecified)) (parameters: parameters (unspecified)) (mipmap?: mipmap? (unspecified)) (metadata: metadata (unspecified))))
  (definition public (make-file-cairo-texture file (min-filter: min-filter (unspecified)) (mag-filter: mag-filter (unspecified)) (parameters: parameters (unspecified)) (mipmap?: mipmap? (unspecified)) (metadata: metadata (unspecified))))
  (definition public (cairo-surface-from-file file))
  (definition protected (make-png-texture file (min-filter: min-filter (unspecified)) (mag-filter: mag-filter (unspecified)) (parameters: parameters (unspecified)) (mipmap?: mipmap? (unspecified)) (metadata: metadata (unspecified))))
  (definition protected (make-png-cairo-texture file (min-filter: min-filter (unspecified)) (mag-filter: mag-filter (unspecified)) (parameters: parameters (unspecified)) (mipmap?: mipmap? (unspecified)) (metadata: metadata (unspecified))))
  (definition protected (cairo-surface-from-png file))
  (definition protected (make-tga-texture file (min-filter: min-filter (unspecified)) (mag-filter: mag-filter (unspecified)) (parameters: parameters (unspecified)) (mipmap?: mipmap? (unspecified)) (metadata: metadata (unspecified))))
  (definition protected (make-tga-cairo-texture file (min-filter: min-filter (unspecified)) (mag-filter: mag-filter (unspecified)) (parameters: parameters (unspecified)) (mipmap?: mipmap? (unspecified)) (metadata: metadata (unspecified))))
  (definition protected (cairo-surface-from-tga file))
  (definition public uv/left)
  (definition public uv/top)
  (definition public uv/right)
  (definition public uv/bottom)
  (definition public (uv left <fl> top <fl> right <fl> bottom <fl> depth <fl>) <f32vector>)
  (definition public (make-uv) <f32vector>)
  (definition public (copy-uv uv <f32vector>) <f32vector>)
  (definition public (uv-left uv <f32vector>) <fl>)
  (definition public (uv-top uv <f32vector>) <fl>)
  (definition public (uv-right uv <f32vector>) <fl>)
  (definition public (uv-bottom uv <f32vector>) <fl>)
  (definition public (uv-depth uv <f32vector>) <fl>)
  (definition public (uv-left-set! uv <f32vector> left <fl>) <void>)
  (definition public (uv-top-set! uv <f32vector> top <fl>) <void>)
  (definition public (uv-right-set! uv <f32vector> right <fl>) <void>)
  (definition public (uv-bottom-set! uv <f32vector> bottom <fl>) <void>)
  (definition public (uv-depth-set! uv <f32vector> depth <fl>) <void>)
  (definition public (uv=? c1 <f32vector> c2 <f32vector>) <bool>)
  (definition public (uv-init! uv <f32vector> left <fl> top <fl> right <fl> bottom <fl> depth <fl>) <void>)
  (definition public (uv-copy! dst <f32vector> src <f32vector>) <void>)
  (definition public (image-coordinates image)))
