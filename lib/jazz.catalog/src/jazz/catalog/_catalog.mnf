(manifest jazz.catalog

  (version 207012)
  (digest "2b554a1327f9d70cfea6f3163c3b136353457150")
  (references (jazz.catalog.catalog.Catalog Catalog)
              (jazz.catalog.catalog.Cataloguer Cataloguer)
              (jazz.catalog.catalog.Filing-Catalog Filing-Catalog)
              (jazz.catalog.entry.Catalog-Entry Catalog-Entry)
              (jazz.catalog.entry.Category-Entry Category-Entry)
              (jazz.catalog.entry.Class-Entry Class-Entry)
              (jazz.catalog.entry.Code-Entry Code-Entry)
              (jazz.catalog.entry.Code-Location Code-Location)
              (jazz.catalog.entry.Constructor-Entry Constructor-Entry)
              (jazz.catalog.entry.Definition-Entry Definition-Entry)
              (jazz.catalog.entry.Entry Entry)
              (jazz.catalog.entry.File-Entry File-Entry)
              (jazz.catalog.entry.Hierarchical-Entry Hierarchical-Entry)
              (jazz.catalog.entry.Import-Entry Import-Entry)
              (jazz.catalog.entry.Indexed-Entry Indexed-Entry)
              (jazz.catalog.entry.Instance-Init-Entry Instance-Init-Entry)
              (jazz.catalog.entry.Interface-Entry Interface-Entry)
              (jazz.catalog.entry.Method-Entry Method-Entry)
              (jazz.catalog.entry.Package-Entry Package-Entry)
              (jazz.catalog.entry.Static-Init-Entry Static-Init-Entry)
              (jazz.catalog.entry.Variable-Entry Variable-Entry)
              (jazz.catalog.parser.File-Parser File-Parser)
              (jazz.catalog.preferences.Catalog-Preferences Catalog-Preferences)
              (jazz.editor.c.parser.C-Parser C-Parser)
              (jazz.editor.clojure.parser.Clojure-Parser Clojure-Parser)
              (jazz.editor.commonlisp.parser.CommonLisp-Parser CommonLisp-Parser)
              (jazz.editor.jazz.parser.Jazz-Parser Jazz-Parser)
              (jazz.editor.scheme.parser.Scheme-Parser Scheme-Parser)
              (jazz.io extension=?)
              (jazz.language.runtime.functional member? rassociate start-loop-thread thread-post)
              (jazz.language.syntax.macros when)
              (jazz.library.literals construct-version)
              (jazz.version Version)
              (scheme.language.runtime.kernel assq car cdr cons list)))
