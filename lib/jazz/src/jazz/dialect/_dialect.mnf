(manifest jazz.dialect

  (version 207012)
  (digest "6d797f8f49b564a11e64241bfd25195e8d050b51")
  (references (jazz.language.syntax.assertion allege assert assertion debug-assert debug-assertion)
              (jazz.language.syntax.attributes attributes)
              (jazz.language.syntax.bind bind bind-vector)
              (jazz.language.syntax.bind-keywords bind-keywords)
              (jazz.language.syntax.bind-optionals bind-optionals)
              (jazz.language.syntax.ecase ecase)
              (jazz.language.syntax.enumeration enumeration)
              (jazz.language.syntax.increase decrease! divide! increase! multiply!)
              (jazz.language.syntax.loop loop)
              (jazz.language.syntax.macros catch constant expand-body hook jazzdoc local-context prog1 site submodule unless unwind-protect when while ~)
              (jazz.language.syntax.marshall expand-marshalling)
              (jazz.language.syntax.state state)
              (jazz.language.syntax.templates instantiate-butlast instantiate-ends-with? instantiate-find instantiate-find-in instantiate-for-each instantiate-starts-with?)
              (jazz.language.syntax.typecase typecase)
              (jazz.language.syntax.with with)
              (scheme.language.runtime.kernel * + - / < <= = > >= abs acos angle append apply asin assoc assq assv atan boolean? caaaar caaadr caaar caadar caaddr caadr caar cadaar cadadr cadar caddar cadddr caddr cadr call-with-current-continuation call-with-input-file call-with-input-string call-with-output-file call-with-output-string call-with-values call/cc car cdaaar cdaadr cdaar cdadar cdaddr cdadr cdar cddaar cddadr cddar cdddar cddddr cdddr cddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? compose-reference cons cos current-input-port current-output-port debug-core? debug-user? denominator desourcify desourcify-all display dynamic-wind eof-object? eq? equal? eqv? er-macro-transformer eval even? exact->inexact exact? exp expt filepos-col filepos-line floor for-each force gcd generate-symbol get-output-string identifier=? identifier? imag-part inexact->exact inexact? input-port-byte-position input-port? integer->char integer? interaction-environment iterate-table lcm length list list->string list->table list->vector list-ref list-tail list? load locat->container/line/col locat-container locat-position log magnitude make-polar make-rectangular make-string make-syntactic-closure make-table make-vector map max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-input-string open-output-file open-output-string output-port-byte-position output-port? pair? peek-char position->filepos positive? present-source pretty-print procedure? quotient rational? rationalize read read-char read-line real-part real? remainder reverse round rsc-macro-transformer sc-macro-transformer scheme-replace-report-environment set-car! set-cdr! simplify-begin sin source-code source-locat source? sourcify sourcify-deep sourcify-deep-if sourcify-if sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? strip-source-info strip-syntactic-closures substring substring-move! subvector symbol->string symbol? syntactic-closure-form syntactic-closure? table->list table-copy table-for-each table-merge table-merge! table-ref table-search table-set! table? tan transcript-off transcript-on truncate unbound-table-key-exception? unwrap-syntactic-closure values vector vector->list vector-append vector-fill! vector-length vector-ref vector-set! vector? with-input-from-file with-input-from-string with-output-to-file with-output-to-string write write-char zero?)
              (scheme.syntax declaration-locator declaration-path declaration-unit let-optionals* optional)))
