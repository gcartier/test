(manifest jazz.language.runtime.functional

  (version 207012)
  (digest "05edad5abe7ffa23691d15fff03ff14971e211ee")
  (references (irregex irregex-match-end-index irregex-match-start-index irregex-search sre->irregex)
              (jazz.language.runtime.kernel +infinity arithmetic-shift bit-set? bitwise-and bitwise-ior bitwise-not boolean break-reference category-field char-symbol class-of close-port compose-identifier condition-signal! continuation-capture continuation-return current-thread default-random-source dequeue deserialize-runtime-reference dispatch enqueue enqueue-list enumerator->symbol enumerator? eof-object field-name field? fixnum? flonum->fixnum flonum? force-output get-category-descendants get-category-identifier get-class-ascendant global-bound? global-ref global-set! input-port-timeout-set! is? jazz-readtable join-strings keyword->string keyword? listify make-condition make-mutex make-parameter make-root-thread make-serialized make-u8vector mutex-lock! mutex-specific mutex-specific-set! mutex-unlock! new new-call-site new-queue not-null? object->serial object->string open-vector print pristine-thread-continuation property-getter property-setter queue-list random-integer random-source-pseudo-randomize! random-source-randomize! read-proper-line read-substring read-subu8vector reference-name reference-unit require-module resolve-runtime-reference sharp/sharp/fl* sharp/sharp/fl+ sharp/sharp/fl- sharp/sharp/fl/ specified? split-identifier string->keyword string-ends-with? string-find-reversed string-starts-with? table-clear table-length terminal-port thread-group->thread-group-list thread-group->thread-list thread-interrupt! thread-sleep! thread-specific thread-specific-set! thread-start! thread-state-abnormally-terminated? thread-state-active-timeout thread-state-active-waiting-for thread-state-active? thread-state-initialized? thread-state-normally-terminated? thread-state-uninitialized? thread-thread-group unimplemented unit-loadable? unspecified unspecified? with-exception-catcher with-readtable write-subu8vector)
              (jazz.language.runtime.object Object (Object ci-compare-object) (Object coerce-string) (Object compare-object) (Object copy-object) (Object destroy) (Object di-compare-object) (Object initialize) (Object iterate-object) (Object object-alphabetic?) (Object object-alphanumeric?) (Object object-capitalize) (Object object-downcase) (Object object-lower-case?) (Object object-numeric?) (Object object-similar?) (Object object-upcase) (Object object-upper-case?) (Object object-whitespace?) (Object print) (Object setup-context) (Object walk-references) ci-compare compare copy di-compare native-class print-unreadable subcopy)
              (jazz.language.syntax.assertion assert)
              (jazz.language.syntax.bind bind)
              (jazz.language.syntax.increase decrease! increase!)
              (jazz.language.syntax.loop loop)
              (jazz.language.syntax.macros prog1 unless unwind-protect when while ~)
              (jazz.language.syntax.templates instantiate-butlast instantiate-ends-with? instantiate-find instantiate-find-in instantiate-for-each instantiate-starts-with?)
              (scheme.language.runtime.kernel * + - / < <= = > >= abs append apply assoc assq assv boolean? caar cadr call-with-input-string call-with-values car cdar cddr cdr ceiling char->integer char-whitespace? char? cons current-output-port denominator display eof-object? eq? equal? eqv? exact? expt floor for-each get-output-string imag-part integer->char integer? iterate-table length list list->vector list-ref list-tail list? make-string make-table make-vector map memq memv modulo newline not null? number->string number? numerator open-output-string pair? peek-char pretty-print procedure? quotient rational? read read-char read-line real-part remainder reverse round set-car! set-cdr! sqrt string string->list string->symbol string-append string-ci<? string-ci=? string-length string-ref string-set! string<? string=? string? substring symbol->string symbol? table-ref table-set! truncate values vector->list vector-length vector-ref vector-set! write write-char zero?)))
