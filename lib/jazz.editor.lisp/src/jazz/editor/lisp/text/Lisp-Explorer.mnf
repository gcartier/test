(manifest jazz.editor.lisp.text.Lisp-Explorer

  (version 207012)
  (digest "bf580a13064f6ec048636583f4c70f3592878477")
  (references (jazz.editor.jazz.syntax.Jazz-Syntax Jazz-Syntax)
              (jazz.editor.lisp (Expression-Syntax get-anonymous?) (Expression-Syntax get-declaration?) (Expression-Syntax get-modifiers) expression-syntax-declaration? expression-syntax-inner? expression-syntax-modifiers expression-syntax-namespace? get-expression-syntax)
              (jazz.editor.lisp.catalog.Lisp-Entry Lisp-Entry (Lisp-Entry set-parameters) (Lisp-Entry set-type))
              (jazz.language.runtime.exception error signal)
              (jazz.language.runtime.format format)
              (jazz.language.runtime.functional /= (Axis get-content) Object-Class Search-Set (Search-Set get-contexts) alphanumeric? cardinality element empty-string? is-not? member? memq? memv? naturals neq? nu=? read-string-element reverse! string-delimiter? subseq whitespace?)
              (jazz.language.runtime.geometry Cell (Cell get-col) (Cell get-line) (Cell set-col))
              (jazz.language.runtime.kernel char-symbol class-of continuation-capture continuation-return dispatch is? new not-null? unimplemented unspecified with-jazz-readtable)
              (jazz.language.runtime.object Object (Object object-alphanumeric?) (Object object-whitespace?) copy)
              (jazz.language.runtime.parse parse-strings)
              (jazz.language.syntax.bind bind)
              (jazz.language.syntax.bind-optionals bind-optionals)
              (jazz.language.syntax.macros constant prog1 unless when while ~)
              (jazz.library.exception.Explore-Error Explore-Error)
              (jazz.library.exemplar Exemplar (Exemplar inherits?))
              (jazz.ui.syntax.Text-Syntax (Text-Syntax comment-string) (Text-Syntax string-style?) (Text-Syntax title-comment-string))
              (jazz.ui.text.Code-Explorer Code-Explorer (Code-Explorer backward-expr) (Code-Explorer forward-expr))
              (jazz.ui.text.Paragraph (Paragraph get-string))
              (jazz.ui.text.Text-Explorer (Text-Explorer backward) (Text-Explorer backward-constituent) (Text-Explorer backward-until) (Text-Explorer backward-whitespaces) (Text-Explorer call-line-hook) (Text-Explorer char-backward) (Text-Explorer char-forward) (Text-Explorer end) (Text-Explorer find-marked-symbol) (Text-Explorer forward) (Text-Explorer forward-constituent) (Text-Explorer forward-until) (Text-Explorer forward-whitespaces) (Text-Explorer get-char) (Text-Explorer get-end) (Text-Explorer get-kind) (Text-Explorer get-marked) (Text-Explorer get-range) (Text-Explorer get-start) (Text-Explorer get-syntax) (Text-Explorer intern-marked-symbol) (Text-Explorer kind) (Text-Explorer limit) (Text-Explorer model) (Text-Explorer next-char) (Text-Explorer next-paragraph) (Text-Explorer next-pos) (Text-Explorer outer-expr) (Text-Explorer paragraph-end) (Text-Explorer paragraph-length) (Text-Explorer paragraph-string) (Text-Explorer previous-char) (Text-Explorer previous-pos) (Text-Explorer select-style) (Text-Explorer set-end) (Text-Explorer set-start) (Text-Explorer specifier-marked?) (Text-Explorer start) (Text-Explorer syntax) (Text-Explorer text-constituent?))
              (jazz.ui.text.Text-Model (Text-Model get-style-at) (Text-Model text-beginning) (Text-Model text-ending) (Text-Model text-search-all))
              (scheme.language.runtime.kernel + - < = > >= apply boolean? cadr car cdr char? cons eq? equal? eqv? for-each list map not null? number? pair? procedure? string string->symbol string-length string=? string? substring symbol->string symbol? values)))
