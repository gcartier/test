(manifest jazz.debuggee

  (version 207012)
  (digest "0bdff4f9d2c564ff5e0d9347a9af7aa96aacc742")
  (references (jazz.debuggee.Debuggee-Frame Debuggee-Frame)
              (jazz.debuggee.Debuggee-Process Debuggee-Process)
              (jazz.debuggee.Debuggee-Restart Debuggee-Restart)
              (jazz.debuggee.Debuggee-Stop Debuggee-Stop)
              (jazz.debuggee.Debuggee-Thread Debuggee-Thread)
              (jazz.debuggee.stub Debuggee-Frame-Stub Debuggee-Process-Local-Proxy Debuggee-Process-Stub Debuggee-Restart-Local-Proxy Debuggee-Restart-Stub Debuggee-Stop-Local-Proxy Debuggee-Stop-Stub Debuggee-Thread-Local-Proxy Debuggee-Thread-Stub)
              (jazz.debuggee.ui.UI-Debuggee UI-Debuggee)
              (jazz.debuggee.view.Exception-Log-Node Exception-Log-Node)
              (jazz.debuggee.view.Log-Node Log-Node)
              (jazz.debuggee.view.Log-Tree Log-Tree)
              (jazz.debuggee.view.Log-View Log-View)
              (jazz.debuggee.view.Profiler-Manager Profiler-Manager)
              (jazz.debuggee.view.Profiler-View Profiler-View)
              (jazz.debuggee.view.Resources-Monitor Resources-Monitor)
              (jazz.debuggee.view.Resources-View Resources-View)
              (jazz.debuggee.view.View-Debugger View-Debugger)
              (jazz.dialect.classes.foundation Walk-Problems)
              (jazz.editor.jazz.inspector package-info)
              (jazz.jrm connect-remote-register flush-remote-switchboard get-local-register local-proxy? start-remote-listener start-remote-switchboard)
              (jazz.language.runtime.debug advise console-input-port console-output-port debug get-console-port set-console-port-getter unadvise)
              (jazz.language.runtime.exception Error active-exception-debugger call-with-catch current-restarts error exception-debugger-hook find-restarts get-exception-debugger invoke-restart new-system-thread set-exception-debugger throw with-exception-debugger with-restart-catcher with-system-exception-debugger)
              (jazz.language.runtime.format format)
              (jazz.language.runtime.functional Class Field Method Object-Class (Sequence sequence-element) Slot call-site-ref call-site-set! cardinality category-identifier class? ends-with? ends-with?stringstring exit-thread find-object memq? neq? new-thread null/pair? present-reference primordial-thread remove! second start-pump starts-with? table-keys/values thread-call thread-call-result? thread-post thread-process thread-write)
              (jazz.language.runtime.kernel add-exit-job! boolean box break-reference category-field category? class-of close-port command-argument continuation-capture continuation-graft continuation-return current-process-icon-set! current-process-title current-process-title-set! current-process-traits-set! current-process-version current-thread display-exception enable-interrupts! enqueue enumerator->symbol enumerator? eval-within-no-winding exception-detail exception-reason find-dispatch force-output generate-symbol-context generate-symbol-counter generate-symbol-for get-exception-hook get-load-mutex get-modules hidden-frame? hidden-frame?-set! install-step-handler invoke-exception-hook is? iterate-class-overrides iterate-table-safe jazz-readtable kernel-platform load-debuggee-units load-unit make-mutex make-parameter make-thread-group module-ref mutex-lock! mutex-owner mutex-unlock! new new-queue not-null? object? open-string-pipe outline-unit platform-eol-encoding procedure-name procedure-name-set! queue-list release-catalog-entries repl-result-history-add requested-unit-name require-module scheme-readtable serial->object set-exception-hook specified? split-symbol system-exception-hook table-clear terminal-port thread-start! unbox unspecified unspecified? update-method use-debugger? walk-for with-exception-filter with-readtable)
              (jazz.language.runtime.object Object (Object initialize))
              (jazz.language.runtime.parse parse-boolean parse-integer)
              (jazz.language.syntax.assertion assert)
              (jazz.language.syntax.bind bind)
              (jazz.language.syntax.increase increase!)
              (jazz.language.syntax.macros catch prog1 unwind-protect when)
              (jazz.language.syntax.typecase typecase)
              (jazz.network parse-host/service)
              (jazz.system.access get-process)
              (scheme.language.runtime.kernel * + - = > append apply cadr call-with-output-file call-with-values car cdr compose-reference cons current-input-port current-output-port display dynamic-wind eof-object? eq? eval for-each iterate-table length list make-table map newline not null? pair? procedure? read string->symbol string=? substring symbol->string symbol? table-ref table-set! values)))
