(manifest jazz.editor.jazz.text.Jazz-Explorer

  (version 207012)
  (digest "6924fde94527bb75c93188a1b1a3fcea08599a16")
  (references (jazz.editor.jazz.text.Location-Error Location-Error)
              (jazz.editor.lisp Expression-Syntax (Expression-Syntax get-modifiers) expression-syntax-keywords expression-syntax-modifiers expression-syntax-namespace?)
              (jazz.editor.lisp.catalog.Lisp-Entry Lisp-Entry (Lisp-Entry set-modifiers) (Lisp-Entry set-parameters))
              (jazz.editor.lisp.text.Lisp-Explorer (Lisp-Explorer backward-expr) (Lisp-Explorer declaration-expr?) (Lisp-Explorer declaration-name) (Lisp-Explorer enter-composite) (Lisp-Explorer enter-list) (Lisp-Explorer exit-composite) (Lisp-Explorer exit-list) (Lisp-Explorer form-expr) (Lisp-Explorer forward-expr) (Lisp-Explorer forward-modifiers) (Lisp-Explorer forward-whites) (Lisp-Explorer get-constant) (Lisp-Explorer walk-expression) (Lisp-Explorer walk-expressions) (Lisp-Explorer walk-parameters) (Lisp-Explorer walk-specifier))
              (jazz.editor.lisp.text.Lisp-Text-View Lisp-Text-View (Lisp-Text-View tabulate))
              (jazz.editor.scheme.text.Scheme-Explorer Scheme-Explorer (Scheme-Explorer expression-comment?) (Scheme-Explorer find-expression-syntax) (Scheme-Explorer find-named-walker) (Scheme-Explorer symbol-documented?) (Scheme-Explorer walk-anonymous) (Scheme-Explorer walk-c-constant) (Scheme-Explorer walk-c-define) (Scheme-Explorer walk-c-external) (Scheme-Explorer walk-c-structure) (Scheme-Explorer walk-c-type) (Scheme-Explorer walk-modifiers) (Scheme-Explorer walk-namespace) (Scheme-Explorer walk-native))
              (jazz.language.runtime.exception error signal)
              (jazz.language.runtime.format format)
              (jazz.language.runtime.functional List-Factory (List-Factory get-output) (List-Factory put) Object-Class collect-if memq? neq? reverse!)
              (jazz.language.runtime.geometry (Cell get-col) (Cell get-line) Range$Cell$ (Range$Cell$ get-start))
              (jazz.language.runtime.kernel new not-null? object->string unspecified)
              (jazz.language.runtime.object Object copy)
              (jazz.language.syntax.assertion allege)
              (jazz.language.syntax.increase decrease!)
              (jazz.language.syntax.macros prog1 unless when while)
              (jazz.library.utility.Undoer (Undoer with-atomic-undo))
              (jazz.ui.outline.Outline-Model (Outline-Model single-client))
              (jazz.ui.text.Explorer-Mark Explorer-Mark (Explorer-Mark get-range))
              (jazz.ui.text.Text-Explorer (Text-Explorer char-forward) (Text-Explorer end) (Text-Explorer find-marked-symbol) (Text-Explorer forward) (Text-Explorer get-char) (Text-Explorer get-end) (Text-Explorer get-kind) (Text-Explorer get-marked) (Text-Explorer get-range) (Text-Explorer get-start) (Text-Explorer goto-beginning) (Text-Explorer intern-marked-symbol) (Text-Explorer kind) (Text-Explorer model) (Text-Explorer read-marked) (Text-Explorer set-end) (Text-Explorer set-start) (Text-Explorer specifier-marked?) (Text-Explorer start))
              (jazz.ui.text.Text-Model (Text-Model delete-range) (Text-Model get-undoer))
              (jazz.ui.text.Text-View (Text-View insert-newline) (Text-View insert-string) (Text-View remove-spaces) (Text-View set-caret))
              (scheme.language.runtime.kernel >= append car cdr char=? cons eq? eqv? list not string-append string=? string>? symbol->string symbol? values)))
