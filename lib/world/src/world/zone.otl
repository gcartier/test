(module world.zone jazz
  (import (jazz.debuggee))
  (import (jazz.geometry))
  (import (jazz.graphic.opengl.glew))
  (import (jazz.io))
  (import (jazz.system))
  (import (world))
  (import (world.actor))
  (import (world.area))
  (import (world.atlas))
  (import (world.autoload))
  (import (world.block))
  (import (world.camera))
  (import (world.configure))
  (import (world.dye))
  (import (world.dyes))
  (import (world.element))
  (import (world.enemy))
  (import (world.entity))
  (import (world.entities))
  (import (world.face))
  (import (world.gadget))
  (import (world.geometry))
  (import (world.gravity))
  (import (world.history))
  (import (world.info))
  (import (world.light))
  (import (world.lighting))
  (import (world.log))
  (import (world.material))
  (import (world.opengl))
  (import (world.planet))
  (import (world.player))
  (import (world.polygon))
  (import (world.procedural))
  (import (world.profiling))
  (import (world.region))
  (import (world.renderer))
  (import (world.renderers))
  (import (world.scene))
  (import (world.sector))
  (import (world.serialization))
  (import (world.settings))
  (import (world.skybox))
  (import (world.sun))
  (import (world.syntax (phase syntax)))
  (import (world.task))
  (import (world.texture))
  (import (world.triangle))
  (class Zone extends Scene
    (property title <string+> accessors generate)
    (property start-mode <symbol> accessors generate)
    (property start-eye <f64vector+> accessors generate)
    (property start-eye-sight <f64vector+> accessors generate)
    (property start-eye-up <f64vector+> accessors generate)
    (property start-position <f64vector+> accessors generate)
    (property start-sight <f64vector+> accessors generate)
    (property start-up <f64vector+> accessors generate)
    (property start-distance <fl+> accessors generate)
    (property floor-level <fl+> accessors generate)
    (property missile-behavior <symbol> accessors generate)
    (property ambient-color <f32vector+> accessors generate)
    (property sun-color <f32vector+> accessors generate)
    (property sun-cycle? <bool> accessors generate)
    (property start-time <Object> accessors generate)
    (property start-skybox <Object> accessors generate)
    (property prepare-script <Object> accessors generate)
    (property start-script <Object> accessors generate)
    (property draw-me? <bool> accessors generate)
    (property properties <Object> accessors generate)
    (property ambient-gravity <Object> accessors generate)
    (property jump-impulsion <Object> accessors generate)
    (property start-grid? <Object> accessors generate)
    (property start-axes? <Object> accessors generate)
    (slot regions-dir <Directory> getter generate)
    (slot regions-mutex <Object> getter generate)
    (slot regions <table> getter generate)
    (slot sectors <table> getter generate)
    (slot sector-size <fx> getter generate)
    (slot sector-radius <fl> getter generate)
    (slot sector-diameter <fl> getter generate)
    (slot sectors-generating <fx> getter generate)
    (slot sectors-mutex <Object> getter generate)
    (slot debug-sectors? <bool> accessors generate)
    (slot areas <table> getter generate)
    (slot area-size <fx> getter generate)
    (slot debug-areas? <bool> accessors generate)
    (slot blocks <list> getter generate)
    (slot players <list> getter generate)
    (slot actors <list> getter generate)
    (slot entities <list> getter generate)
    (slot gravities <list> getter generate)
    (slot gadgets <list> getter generate)
    (slot marks <list> getter generate)
    (slot close-ambiance? <bool> accessors generate)
    (slot editable-warned? <bool> accessors generate)
    (slot generate-thread <Object> accessors generate)
    (slot lighting <Lighting> accessors generate)
    (slot daytime <fl> getter generate)
    (slot daylight <fl> accessors generate)
    (slot sun <Sun+> accessors generate)
    (slot sun-angle <fl> accessors generate)
    (slot skybox <Skybox+> accessors generate)
    (slot designer <Object> accessors generate)
    (method protected virtual (minecraft?))
    (method protected virtual (needs-pumps?))
    (method protected override (prepare rest))
    (method protected override (finish rest))
    (method protected final (initialize-zone))
    (method protected final (start-zone))
    (method protected final (setup-overrides))
    (method protected override (print output readably))
    (method protected virtual (sector-class))
    (method protected virtual (populate-zone))
    (method protected virtual (generate-physical sector))
    (method protected virtual (generate-content?))
    (method protected virtual (generate-content sector))
    (method protected virtual (before-close))
    (method protected virtual (save-exit))
    (method protected final (determine-path))
    (slot destroy-hooks getter generate)
    (method protected final (register-destroy-hook proc))
    (method protected final (unregister-destroy-hook proc))
    (method protected override (add-child child))
    (method protected override (destroy-component))
    (method protected override (destroy))
    (method protected final (stop-tasks))
    (method protected final (reset-zone))
    (method protected virtual (setup-content))
    (method protected final (update-children))
    (method public virtual (target-update target face face-rank poly))
    (method protected final (get-moniker))
    (method protected final (get-modified?))
    (method protected final (set-modified? flag))
    (method protected final (read-element element property))
    (method protected final (write-element element property value))
    (method protected final (draw-zone))
    (method protected virtual (create-atlas))
    (method protected virtual (create-atlas-nearest))
    (method protected virtual (create-opaque-material atlas))
    (method protected virtual (create-transparent-material atlas))
    (method protected virtual (prepare-blocks))
    (method protected virtual (sample-program-image program))
    (method protected virtual (prepare-skybox))
    (method protected final (install-skybox sky))
    (method protected final (remove-skybox))
    (method protected final (setup-boundaries))
    (method protected final (snapshot-zone))
    (method protected final (load-zone snapshot))
    (method protected final (add-element obj))
    (method protected final (remove-element obj))
    (method protected final (update-element element old-position))
    (method protected final (find-element predicate))
    (method protected final (find-named-element name))
    (method protected final (find-gadget predicate))
    (method protected final (iterate-players proc))
    (method protected final (iterate-actors proc))
    (method protected final (iterate-entities proc))
    (method protected final (iterate-gadgets proc))
    (method protected final (iterate-elements proc))
    (method protected final (draw-me))
    (method protected final (element-at vert))
    (method protected final (element-near vert))
    (method protected final (validate-elements))
    (method protected virtual (region-class))
    (method protected final (with-regions-mutex thunk))
    (method protected final (free-regions))
    (method protected final (iterate-regions proc))
    (method protected final (compute-boundaries))
    (method protected final (get-region region-index <pair>) <World-Region+>)
    (method protected final (sector-region sector-x <fx> sector-y <fx> sector-z <fx>) <World-Region+>)
    (method protected final (setup-sectors))
    (method protected final (element-sector-index element <Element>) <vector>)
    (method protected final (position-sector-index pos <f64vector>) <vector>)
    (method protected final (position-sector pos) <Sector>)
    (method protected final (element-sector element) <Sector>)
    (method protected final (index-sector index <vector>) <Sector>)
    (method protected final (coordinates-sector x y z) <Sector>)
    (method protected final (new-sector index <vector>) <Sector>)
    (method protected final (unlink-sector sector))
    (method protected final (free-sectors))
    (method protected final (sector-add-element sector element))
    (method protected final (sector-remove-element sector element))
    (method protected final (update-sector element old-position))
    (method protected final (iterate-sectors-with-blocks proc))
    (method protected final (iterate-position-neighbor-sectors pos distance <fx> proc))
    (method protected final (iterate-position-outward-neighbor-sectors pos distance <fx> proc))
    (method package final (get-eye-index))
    (method package final (get-eye-sectors))
    (method protected final (reset-eye-sectors))
    (method protected final (eye-neighbor-sectors pos distance <fx>) <vector>)
    (method protected final (draw-eye-neighbors camera <Camera> view-distance <fx> proc))
    (method protected final (iterate-element-neighbor-sectors element distance proc))
    (method protected final (element-neighbor-sectors element distance))
    (method protected final (increase-sectors-generating count <fx>))
    (method protected final (decrease-sectors-generating count <fx>))
    (method protected final (compute-floats))
    (method protected final (count-non-empty-sectors))
    (method protected final (validate-sectors))
    (method protected final (toggle-debug-sectors))
    (method protected final (draw-debug-sectors))
    (method protected final (setup-areas))
    (method protected final (element-area-index element <Element>) <vector>)
    (method protected final (position-area-index pos <f64vector>) <vector>)
    (method protected final (position-area pos) <Area>)
    (method protected final (element-area element) <Area>)
    (method protected final (index-area index <vector> (update? (unspecified))) <Area>)
    (method protected final (coordinates-area x y z) <Area>)
    (method protected final (area-coordinates-sector x <fx> y <fx> z <fx>) <Sector>)
    (method protected final (unlink-area area))
    (method protected final (area-add-element area element))
    (method protected final (area-remove-element area element))
    (method protected final (update-area element old-position))
    (method protected final (iterate-position-neighbor-areas pos distance <fx> proc))
    (method protected final (iterate-area-elements area proc))
    (method protected final (collect-area-elements))
    (method protected final (areas-count filter))
    (method protected final (count-polygons))
    (method protected final (validate-areas))
    (method protected final (toggle-debug-areas))
    (method protected final (draw-debug-areas))
    (method protected final (draw-gadgets))
    (method protected final (draw-drawable-gadgets))
    (method protected final (remove-duplicate-blocks))
    (method protected final (set-sun-speed speed))
    (method protected final (sun-task task <Task>))
    (method protected final (tick-sun elapse (reverse? (unspecified))))
    (method protected final (position-sun angle))
    (method protected virtual (sun-light?))
    (method protected virtual (sun-update-lighting effective coord))
    (method protected virtual (sun-update))
    (method protected final (register-sun))
    (method protected final (set-daytime time))
    (method protected final (daytime->daylight daytime))
    (method protected virtual (effective-lights))
    (method protected virtual (effective-player-glow))
    (method protected final (default-lights))
    (method protected final (setup-lighting))
    (method protected final (iterate-lights proc))
    (method protected final (collect-lights))
    (method protected final (count-lights))
    (method protected final (invalidate-lightmaps element))
    (method public final (iterate-gravities proc))
    (method public final (iterate-planets proc))
    (method public final (collect-planets))
    (method protected final (reset-marks))
    (method protected final (set-marks lst))
    (method protected final (set-mark mark))
    (method protected final (add-mark mark))
    (method protected final (remove-mark mark))
    (method protected final (draw-marks))
    (method protected final (reset-all-marks))
    (method protected virtual (zone-editable?))
    (method protected virtual (zone-destructible?))
    (method protected final (draw-atlas))
    (method protected final (generate-heightmap-content sector <Sector> heightmap <f32vector> from-x <fx> width <fx> from-z <fx> depth <fx> what)))
  (class Procedural-Zone extends Zone
    (property detail-level <fl> accessors generate)
    (property clamp-height <fl> accessors generate)
    (property seed <Object> accessors generate)
    (property generator <Perlin-Generator> accessors generate)
    (method protected override (setup-component))
    (method protected override (zone-editable?))
    (method protected override (zone-destructible?))
    (method protected override (generate-content?))
    (method protected override (generate-content sector <Sector>))
    (method protected override (generate-physical sector <Sector>))
    (method protected final (generate-procedural sector <Sector> from-x <fx> width <fx> from-z <fx> depth <fx> what))))
