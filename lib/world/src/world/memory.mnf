(manifest world.memory

  (version 207012)
  (digest "dd28c33d37bb876019b005250abdecda13fdb21c")
  (references (gambit.ext MOVABLE0 PERM copy-to domain-bytes-copied domain-bytes-copied-set! domain-copies gc-hash-table? iterate-register make-domain mem-allocated-kind mem-allocated-size mem-allocated? new-register register->table register-length register-ref register-set! symbol-name walk-continue walk-interned-symbols walk-object! walk-prune)
              (jazz.debuggee eval-count)
              (jazz.dialect.classes.foundation Dialect)
              (jazz.io make-filename path-settings)
              (jazz.language.runtime.debug break debug inspect)
              (jazz.language.runtime.format format)
              (jazz.language.runtime.functional Module Object-Class (Sequence sequence-element) category-name first fxround memq? neq? pp remove-false second sort subseq table-keys table-values)
              (jazz.language.runtime.kernel %c %h %i %m category? class-of compile-file compile-options enqueue generate-symbol-context generate-symbol-counter generate-symbol-for get-catalog get-modules is? kind? load-file load-unit new new-queue object? outline-unit path->container-override process-memory queue-list requested-unit-name require-module set-%a set-%c set-%h set-%i set-%m set-%o set-%p set-%r set-%s set-outline-hook table-length terminal unspecified walk-for with-jazz-readtable)
              (jazz.language.runtime.object Object (Object initialize) (Object print) print-unreadable)
              (jazz.language.syntax.bind bind)
              (jazz.language.syntax.increase increase!)
              (jazz.language.syntax.loop loop)
              (jazz.language.syntax.macros unless when)
              (jazz.platform.glfw get-temporary-file)
              (scheme.language.runtime.kernel * + - / < = > >= apply call-with-output-file car cdr cons display eq? equal? eval for-each iterate-table length list list-ref make-table map min newline not pair? source? string? symbol? table->list table-ref table-search table-set! table? values vector vector-ref write)
              (world *current-world* *current-zone*)
              (world.live World)
              (world.syntax current-world current-zone)
              (world.zone Zone)))
