(manifest world.collision

  (version 207012)
  (digest "2aa0cffad62128ada0ce5aaa73198e191346b904")
  (references (jazz.graphic.opengl.glew.header GL_LIGHTING GL_LINE_LOOP glBegin glDisable glEnable glEnd glLineWidth glVertex3f)
              (jazz.language.runtime.debug debug)
              (jazz.language.runtime.format format)
              (jazz.language.runtime.functional /= (Class marshall-object) (Class unmarshall-object) Object-Class element find-if fxceiling memq? serialize-object sign union)
              (jazz.language.runtime.kernel class-of continuation-capture continuation-return dispatch enqueue new new-queue not-null? queue-list reset-queue unspecified)
              (jazz.language.runtime.object Object (Object initialize) (Object print) print-unreadable)
              (jazz.language.syntax.bind bind-vector)
              (jazz.language.syntax.loop loop)
              (jazz.language.syntax.macros site unless when ~)
              (scheme.language.runtime.kernel * + - / < <= > >= abs append apply car cons eq? for-each length list map min not null? sqrt values vector vector-ref)
              (world *current-world* *current-zone*)
              (world.draw draw-plane)
              (world.dyes blue-dye green-dye purple-dye red-dye)
              (world.geometry EPSILON copy-movement! copy-plane cross-normal-safe! cross-product! dot-product dot-product! intersect-plane matrix-transform-3x4 movement-end movement-end! movement-end-to movement-end-to! movement-transform-3x4 movement-transform-3x4! plane-closest! plane-to-point-distance sphere-matrices! transform-plane transform-ray/normalize vertex-distance vertex-distance!)
              (world.geometry.base vertex* vertex+! vertex- vertex-! vertex-abs! vertex-norm vertex-norm! vertex-normalize! vertex-normalize-safe! vertex-scalar*!)
              (world.geometry.classes copy-vertex make-matrix make-vertex vertex vertex-copy! vertex-x vertex-y vertex-z vertex-zero? vertex=?)
              (world.geometry.syntax copy-movement& cross-normal-safe& cross-product& dot-product& make-f64& make-matrix& make-movement& make-vertex& movement-end& movement-end-to& plane-closest& vertex+& vertex-& vertex-abs& vertex-distance& vertex-norm& vertex-normalize& vertex-normalize-safe& vertex-scalar*&)
              (world.homogeneous f64-ref make-f64)
              (world.live World (World travel-ray-polygons&))
              (world.lookat LookAt (LookAt get-sight) (LookAt get-up))
              (world.mark Mark (Mark draw) Vertex-Mark)
              (world.movement Movement (Movement get-length) (Movement get-normal) (Movement get-origin) (Movement get-vector) (Movement set-origin) (Movement set-vector))
              (world.opengl gl-colorize-dye)
              (world.plane Plane (Plane get-normal) (Plane get-origin))
              (world.polygon Polygon (Polygon closest-point-on-perimeter!) (Polygon copy-polygon) (Polygon get-center) (Polygon get-element) (Polygon get-radius) (Polygon get-vertices) (Polygon inside?) (Polygon transform-polygon))
              (world.serialization deserialize serialize)
              (world.syntax current-world current-zone debug-allocation)
              (world.zone Zone (Zone add-mark) (Zone get-area-size) (Zone reset-marks))))
