(module world.generate jazz
  (import (world))
  (import (world.area))
  (import (world.autoload))
  (import (world.face))
  (import (world.geometry))
  (import (world.material))
  (import (world.mesh))
  (import (world.parallelepiped))
  (import (world.polygon))
  (import (world.profiling))
  (import (world.quad))
  (import (world.syntax (phase syntax)))
  (import (world.triangle))
  (definition public (generate-void generator))
  (definition public (generate-debug generator))
  (definition public (iterate-cuboid-quads cuboid <f64vector> element proc))
  (definition public (iterate-cuboid-inner-quads cuboid <f64vector> element proc))
  (definition public (ray-closest-cuboid-inner-quad orig <f64vector> dir <f64vector> cuboid))
  (definition public (transform-cuboid cuboid <f64vector> matrix <f64vector>) <Parallelepiped>)
  (definition public (iterate-parallelepiped-quads para <Parallelepiped> sphere-matrix poly proc element))
  (definition public (iterate-parallelepiped-vertices para <Parallelepiped> proc))
  (definition public (parallelepiped-bounds para <Parallelepiped>) <f64vector>)
  (definition public (generate-mesh generator (matrix: matrix (unspecified)) (neighbors?: neighbors? (unspecified)) (smooth-normals?: smooth-normals? (unspecified)) (material: material (unspecified)) (return-faces?: return-faces? (unspecified))))
  (class Mesher extends Object
    (slot content <f32vector> getter generate)
    (slot neighbors <f32vector> getter generate)
    (slot lightmap <f32vector> getter generate)
    (slot matrix <f64vector+> getter generate)
    (slot material <Material> getter generate)
    (slot reserved <fx> getter generate)
    (slot used <fx> getter generate)
    (slot growths <fx> getter generate)
    (slot i <fx>)
    (slot j <fx>)
    (slot k <fx>)
    (method protected override (initialize triangles-count <fx> quads-count <fx> (matrix: matrix (unspecified)) (material: material (unspecified))))
    (method protected final (reset))
    (method protected final (add-face face <Face>))
    (method protected final (add-triangle v1 <f64vector> n1 <f64vector> s1 <fx> t1 <fx> b1 <fx> v2 <f64vector> n2 <f64vector> s2 <fx> t2 <fx> b2 <fx> v3 <f64vector> n3 <f64vector> s3 <fx> t3 <fx> b3 <fx> uv <f32vector> tdepth <fl>))
    (method protected final (add-quad v1 <f64vector> n1 <f64vector> s1 <fx> t1 <fx> b1 <fx> v2 <f64vector> n2 <f64vector> s2 <fx> t2 <fx> b2 <fx> v3 <f64vector> n3 <f64vector> s3 <fx> t3 <fx> b3 <fx> v4 <f64vector> n4 <f64vector> s4 <fx> t4 <fx> b4 <fx> uv <f32vector> tdepth <fl>))
    (method protected final (transform vert))
    (method protected final (add v1 n1 s1 t1 b1 v2 n2 s2 t2 b2 v3 n3 s3 t3 b3 uv tdepth))
    (method protected final (add-vertex vert normal s <fx> t <fx> uv <f32vector> tdepth bone <fx>))
    (method protected final (add-neighbors rank n1 n2))
    (method protected final (get-mesh) <Mesh>)
    (method protected final (get-mesh-content)))
  (definition public (generate/add-faces generator (matrix: matrix (unspecified)) (smooth-normals?: smooth-normals? (unspecified)) (material: material (unspecified))))
  (definition public (faces-generator faces))
  (definition public (polygons-extract element polygons <f64vector> matrix))
  (definition public (generate/add-polygons generator (element: element (unspecified)) (matrix: matrix (unspecified)))))
