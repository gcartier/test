(manifest world.external.minecraft

  (version 207012)
  (digest "009f211bc69ea16c1345ed00b44e31951d61cc91")
  (references (jazz.debuggee add-debugger-release)
              (jazz.geometry PI*2)
              (jazz.graphic.opengl.glew.header GL_NEAREST)
              (jazz.io Directory (Directory new-directory) is-alias?)
              (jazz.io.literals construct-directory)
              (jazz.jml construct-form get-class-form-with-origin locators-ref)
              (jazz.jml.syntax <form> form)
              (jazz.language.runtime.debug debug)
              (jazz.language.runtime.format format)
              (jazz.language.runtime.functional /= Call-Site (Call-Site get-procedure) Object-Class ci=? flmodulo fxround neq? register-site table-add)
              (jazz.language.runtime.kernel arithmetic-shift-right bitwise-and current-thread f32vector f32vector-set! flalloc flonum? make-mutex make-u16vector make-u8vector mutex-lock! mutex-owner mutex-unlock! new table-length u16vector-ref u16vector-set! u8vector u8vector-ref u8vector-set! unspecified)
              (jazz.language.runtime.object Object (Object close) (Object initialize) (Object print) print-unreadable)
              (jazz.language.syntax.assertion allege)
              (jazz.language.syntax.bind bind)
              (jazz.language.syntax.ecase ecase)
              (jazz.language.syntax.increase increase!)
              (jazz.language.syntax.loop loop)
              (jazz.language.syntax.macros constant prog1 site unless when)
              (jazz.language.syntax.with with)
              (jazz.library.component.Component (Component child) (Component~Class get-class-form) (Component~Class get-class-forms) (Component~Class set-class-form))
              (jazz.system find-setting)
              (jazz.system.access get-application)
              (jazz.ui get-bindings)
              (scheme.language.runtime.kernel * + - / < <= = > >= cadr car cdr cons dynamic-wind eq? equal? eqv? even? for-each integer? iterate-table list list->table make-table make-vector not pair? quotient string->number string? table-ref table-set! vector vector-ref vector-set!)
              (scheme.syntax declaration-path)
              (world *current-world* *current-zone*)
              (world.area Area (Area add-polygons))
              (world.atlas Atlas (Atlas add-directory) (Atlas complete) (Atlas get-texture) (Atlas image-rect) register-atlas registered-atlas)
              (world.chunk World-Chunk (World-Chunk initialize))
              (world.dye dye)
              (world.external (Binary-Writer get-content))
              (world.external.minecraft-syntax define-minecraft-block)
              (world.external.nbt NBT-Reader (NBT-Reader read-tag) NBT-Writer (NBT-Writer write-tag) list-payload-content tag-assoc tag-value)
              (world.face Face (Face get-polygon) (Face initialize))
              (world.generate Mesher (Mesher add-face) (Mesher get-growths) (Mesher get-mesh-content) (Mesher get-reserved) (Mesher k) (Mesher lightmap) (Mesher reset))
              (world.geometry.base vertex+ vertex-scalar*!)
              (world.geometry.classes make-vertex vertex vertex-x vertex-y vertex-z)
              (world.geometry.syntax fl& make-fl& make-vertex& vertex-scalar*&)
              (world.homogeneous fl-init!)
              (world.info register-info unregister-info)
              (world.live World (World get-interface) (World get-user-assets))
              (world.log write-render-event)
              (world.material Material)
              (world.mesh Mesh (Mesh get-material))
              (world.polygon (Polygon get-center))
              (world.profiling Checkpoint call-checkpoint register-checkpoint)
              (world.quad make-quad)
              (world.region World-Region (World-Region chunk-index) (World-Region deserialize-chunk) (World-Region get-section) (World-Region get-x) (World-Region get-z) (World-Region serialize-chunk))
              (world.renderers get-coverage-renderer get-multitexture-renderer get-opaque-renderer get-transparent-renderer get-water-renderer get-wet-renderer)
              (world.section World-Section (World-Section get-blocklight) (World-Section get-blocks) (World-Section get-data) (World-Section get-skylight))
              (world.sector Sector (Sector fill-lightmap) (Sector fill-vertices/neighbors) (Sector free-mesh) (Sector get-index) (Sector get-mesh) (Sector get-other-meshes) (Sector set-content-revision) (Sector set-content-uptodate?) (Sector set-generating?) (Sector set-lightmap-uptodate?) (Sector set-section) (Sector set-vertices-uptodate?) (Sector setup-mesh) (Sector setup-other-meshes) get-current-content-revision)
              (world.syntax checkpoint current-world current-zone)
              (world.texture uv-bottom uv-depth uv-left uv-right uv-top)
              (world.zone Zone (Zone ambient-color) (Zone blocks) (Zone create-atlas) (Zone create-atlas-nearest) (Zone create-opaque-material) (Zone create-transparent-material) (Zone daytime) (Zone decrease-sectors-generating) (Zone destroy) (Zone effective-lights) (Zone effective-player-glow) (Zone finish) (Zone generate-content) (Zone generate-content?) (Zone generate-physical) (Zone get-regions-dir) (Zone index-area) (Zone minecraft?) (Zone needs-pumps?) (Zone position-area) (Zone position-area-index) (Zone position-sector) (Zone position-sun) (Zone prepare) (Zone region-class) (Zone regions) (Zone regions-dir) (Zone sample-program-image) (Zone sector-region) (Zone set-daytime) (Zone start-time) (Zone sun-angle) (Zone sun-cycle?) (Zone sun-light?) (Zone sun-update) (Zone sun-update-lighting) (Zone target-update) (Zone with-regions-mutex) (Zone zone-destructible?) (Zone zone-editable?))))
