(manifest world.zone

  (version 207012)
  (digest "9a77a65b98e6502dd29f34297fca5daf2a4c5bd7")
  (references (jazz.debuggee present-current-loop-restart with-current-loop)
              (jazz.geometry PI PI*2 PI/4)
              (jazz.graphic.opengl.glew gl-check-error)
              (jazz.graphic.opengl.glew.header GL_LIGHTING GL_LINES GL_NEAREST glBegin glDisable glEnable glEnd glVertex3f)
              (jazz.io Directory (Directory iterate-directory) (Directory new-file) File (Moniker compare-pathname) (Pathname exists?) (Pathname get-base) (Pathname get-extension) extension=? pathname=?)
              (jazz.language.runtime.exception error with-restart-catcher)
              (jazz.language.runtime.format format format-cardinality format-plural)
              (jazz.language.runtime.functional Call-Site (Call-Site get-procedure) Object-Class count-if empty-table find-if flmodulo fxfloor fxfloor/ is-not? neq? random-seed read-property register-site remove! some? sort split table-add)
              (jazz.language.runtime.kernel +infinity arithmetic-shift-right class-of continuation-capture continuation-return current-seconds dispatch enqueue enqueue-list f32vector f32vector-length f32vector-ref f32vector-set! f64vector-length is? make-f32vector make-mutex mutex-lock! mutex-unlock! new new-queue not-null? object->u8vector queue-list specified? u8vector->object unimplemented unspecified)
              (jazz.language.runtime.object (Object close) print-unreadable)
              (jazz.language.syntax.assertion assert)
              (jazz.language.syntax.bind bind)
              (jazz.language.syntax.increase increase!)
              (jazz.language.syntax.loop loop)
              (jazz.language.syntax.macros prog1 site unless when ~)
              (jazz.language.syntax.typecase typecase)
              (jazz.library.component.Component (Component add-child) (Component children) (Component destroy) (Component destroy-component) (Component finish) (Component get-visible?) (Component prepare) (Component print) (Component setup-component))
              (jazz.system find-setting)
              (scheme.language.runtime.kernel * + - / < <= = > >= apply car cdr cons eq? equal? expt for-each iterate-table length list make-table make-vector max min not null? real? string->number string-length substring table-ref table-set! values vector vector-length vector-ref vector-set!)
              (world *current-me* *current-world* *current-zone* load-point set-current-me set-current-zone)
              (world.actor Actor)
              (world.area Area (Area add-polygons))
              (world.atlas (Atlas image-rect) register-atlas registered-atlas)
              (world.block Block)
              (world.camera Camera (Camera in-frustum?))
              (world.configure player-task? sun-rate sun-task? tick-task?)
              (world.dye dye dye-blue dye-green dye-red)
              (world.dyes red-dye)
              (world.element Element (Element draw) (Element get-position))
              (world.enemy Missile)
              (world.entities register-entity-classes)
              (world.entity Entity)
              (world.face Face (Face get-polygon) make-face)
              (world.gadget Gadget)
              (world.geometry plane-normal rotate-upon! vertex-distance)
              (world.geometry.base vertex-increase! vertex-norm vertex-normalize! vertex-scalar*)
              (world.geometry.classes make-vertex vertex vertex-hash vertex-x vertex-y vertex-z vertex=?)
              (world.geometry.syntax make-vertex& rotate-upon&)
              (world.gravity Gravity-Well default-gravity default-jump)
              (world.history Snapshot)
              (world.info register-info unregister-info)
              (world.light Light Light-Ambient)
              (world.lighting Lighting (Lighting set-ambient-color) (Lighting set-lights) (Lighting set-lights-count) (Lighting set-sun-coordinates) (Lighting set-sun-effective) (Lighting setup) set-current-lighting)
              (world.live World (World close-ambiance) (World display-message) (World draw-sectors) (World editor-remove-element) (World effective-draw-gadgets?) (World get-block-atlas) (World get-block-opaque) (World get-default-image) (World get-draw-atlas?) (World get-draw-elements?) (World get-draw-marks?) (World get-dynamic-lights) (World get-eye) (World get-lighting?) (World get-paused?) (World get-zones-directories) (World make-block-atlas) (World player-task) (World prepare-block) (World render-task) (World set-ambient-gravity) (World set-axes?) (World set-eye) (World set-grid?) (World set-jump-impulsion) (World setup-history) (World tick-task) (World update-parameter) (World update-title) (World zone-based?))
              (world.log sun-id sun-sequential-state support-state with-log-context write-render-event)
              (world.material Material)
              (world.opengl gl-colorize-dye)
              (world.plane (Plane get-normal))
              (world.planet Planet)
              (world.player Player)
              (world.polygon (Polygon get-center) polygon-float-size)
              (world.procedural Perlin-Generator (Perlin-Generator get-value))
              (world.profiling active-site inactive-site)
              (world.region World-Region region-size)
              (world.renderer register-entity)
              (world.renderers get-opaque-renderer get-transparent-renderer reset-renderes)
              (world.scene Scene)
              (world.sector Sector (Sector get-center) (Sector get-index) (Sector set-content-revision) (Sector set-content-uptodate?) (Sector update) (Sector update-physical) generate-task get-current-content-revision reset-content stop-generate)
              (world.serialization deserialize serialize)
              (world.settings world-setting)
              (world.skybox Skybox (Skybox draw-skybox) find-skybox)
              (world.sun Sun)
              (world.syntax current-me current-world current-zone)
              (world.task Task (Task ready-task) (Task set-context) register-task start-task stop-task task-sleep task-stopping? with-task-mutex)
              (world.texture uv-bottom uv-depth uv-left uv-right uv-top)
              (world.triangle Smooth-Triangle (Smooth-Triangle set-n1) (Smooth-Triangle set-n2) (Smooth-Triangle set-n3) make-smooth-triangle)))
