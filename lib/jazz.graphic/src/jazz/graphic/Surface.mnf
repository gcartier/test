(manifest jazz.graphic.Surface

  (version 207012)
  (digest "d806a8ddb180bae7c667ad007fa72a84ea17d26b")
  (references (jazz.geometry PI*2 PI/4 center fit-dimensions inflate-rect inflate-rectRectflfl rect->rect$fl$ rect-height rect-size rect-width)
              (jazz.graphic.Color Color (Color get-alpha) (Color get-blue) (Color get-green) (Color get-red))
              (jazz.graphic.Gradient Gradient (Gradient get-kind) (Gradient get-parts))
              (jazz.graphic.Rectangles-Region (Rectangles-Region get-rectangles))
              (jazz.graphic.Texture Texture (Texture get-attribute) (Texture get-content) (Texture get-mode))
              (jazz.graphic.font.Font Font (Font get-scaled-font) (Font get-shadow) (Font glyph-index))
              (jazz.graphic.image resize-image)
              (jazz.graphic.image.Image Image (Image draw-at) (Image get-handle) (Image image-size))
              (jazz.graphic.literals construct-color)
              (jazz.graphic.platform.glfw.Region Region)
              (jazz.io File (Pathname exists?) (Pathname parse))
              (jazz.language.runtime.debug debug)
              (jazz.language.runtime.exception error)
              (jazz.language.runtime.functional /= List Object-Class Sequence (Sequence sequence-cardinality) (Sequence sequence-element) cardinality element every? fl fxceiling fxfloor fxfloor/ fxround memq? naturals subseq!)
              (jazz.language.runtime.geometry Dimension (Dimension get-height) (Dimension get-width) Distance (Distance get-x) (Distance get-y) Point (Point get-h) (Point get-v) Rect (Rect get-bottom) (Rect get-left) (Rect get-right) (Rect get-top) Rect$fl$ (Rect$fl$ get-bottom) (Rect$fl$ get-left) (Rect$fl$ get-right) (Rect$fl$ get-top))
              (jazz.language.runtime.kernel is? new unspecified)
              (jazz.language.runtime.object Object (Object close) (Object destroy) (Object destroy-mandatory) (Object initialize))
              (jazz.language.syntax.bind bind)
              (jazz.language.syntax.increase decrease! increase!)
              (jazz.language.syntax.loop loop)
              (jazz.language.syntax.macros prog1 unless when while)
              (jazz.language.syntax.typecase typecase)
              (jazz.language.syntax.with with)
              (jazz.library.resource.Image-Resource Image-Resource)
              (jazz.literals construct-point)
              (jazz.platform.cairo CAIRO_EXTEND_REPEAT cairo_arc cairo_clip cairo_close_path cairo_create cairo_current_point cairo_destroy cairo_device_to_user cairo_device_to_user_distance cairo_fill cairo_fill_preserve cairo_font_extents cairo_font_extents_t-ascent-ref cairo_font_extents_t-free cairo_font_extents_t-height-ref cairo_font_extents_t-make cairo_get_clipper cairo_get_clipper_raw cairo_get_line_width cairo_get_matrix_raw cairo_get_source cairo_glyph_extents cairo_glyph_t-free cairo_glyph_t-index-set! cairo_glyph_t-make cairo_glyph_t-x-set! cairo_glyph_t-y-set! cairo_identity_matrix cairo_line_to cairo_matrix_t-x0-ref cairo_matrix_t-xx-ref cairo_matrix_t-xy-ref cairo_matrix_t-y0-ref cairo_matrix_t-yx-ref cairo_matrix_t-yy-ref cairo_move_to cairo_paint cairo_pattern_add_color_stop_rgba cairo_pattern_create_linear cairo_pattern_destroy cairo_pattern_set_extend cairo_rectangle cairo_rel_curve_to cairo_rel_line_to cairo_rel_move_to cairo_reset_clip cairo_rotate cairo_scale cairo_set_alternate cairo_set_clipper_raw cairo_set_line_width cairo_set_matrix_raw cairo_set_operator cairo_set_scaled_font cairo_set_solid cairo_set_source cairo_set_source_rgba cairo_set_source_surface cairo_show_glyphs cairo_show_page cairo_status cairo_stroke cairo_stroke_preserve cairo_surface_destroy cairo_surface_finish cairo_surface_status cairo_surface_write_to_png cairo_text_extents cairo_text_extents_t-free cairo_text_extents_t-make cairo_text_extents_t-x_advance-ref cairo_transform cairo_translate cairo_user_to_device cairo_user_to_device_distance glyph-array-free glyph-array-make glyph-array-ref)
              (scheme.language.runtime.kernel * + - / < <= = car cdr char->integer dynamic-wind eq? eqv? for-each length list make-vector map not null? vector-set!)))
